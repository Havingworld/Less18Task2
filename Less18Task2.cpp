/*
 ролик сидит на нулевой ступеньке большой лестницы. ќн может прыгать на 1, 2 или 3 ступеньки вверх.
 ролик хочет допрыгать до n-й ступеньки, но может сделать это большим количеством способов.

Ќапишите рекурсивную функцию, котора€ принимает число n типа int, а возвращает количество способов,
которыми кролик может доскакать до n-й ступеньки.

ѕример:
¬вод: 3
¬ывод : 4
ѕо€снение: (3), (1,2), (2,1), (1,1,1)

„ек-лист дл€ проверки задачи
‘ункци€ принимает корректные типы данных, тип возвращаемого значени€ Ч  int.
‘ункци€ не использует библиотек кроме <iostream>.
‘ункци€ рекурсивна€.
*/

/*
ѕусть fi Ц количество вариантов на лестнице с i ступеньками.
ќчевидно, что f0 = f1 = 1.
ѕусть k Ц это максимальный прыжок.
≈сли первый прыжок равен 1, то на оставшихс€ ступеньках количество вариантов равно f(i - 1),
если 2, то f(i - 2),
если k, то f(i - k),
т.е. получаем рекуррентную формулу
f(i) = f(i - 1) + f(i - 2) + Е + f(i - k).********************(1)
≈сли примен€ть ее непосредственно, то многократно будут вычисл€тьс€ перекрещивающиес€ подзадачи, поэтому надо применить динамическое программирование,
т.е. вычислить их один раз и сложить в вектор.
¬ нем два первых элемента единицы, а каждый следующий равен сумме предыдущих k, или всех предыдущих, если их меньше k.
»з формулы (1) имеем
f(i + 1) = f(i) + f(i - 1) + Е + f(i Ц k + 1)****************(2)
т.е.
f(i + 1) = f(i) + f(i - 1) + Е + f(i Ц (k - 1))***************(3)
откуда, согласно (1), получим:
f(i + 1) = f(i) + f(i) Ц f(i Ц k)
т.е.
f(i + 1) = 2 * f(i) Ц f(i Ц k)
или
f(i) = 2 * f(i - 1) Ц f(i Ц k - 1).
–азумеетс€, второй член вычитаем, если его индекс неотрицательный.
ѕо этой формуле заполн€ем вектор, пока не дойдем до нужного нам индекса, равного заданной длине N лестницы. «начение по этому индексу и будет ответом дл€ заданных N и k.
*/

#include <iostream>
using namespace std;

int cals(int stair)
{
	if (stair == 0 || stair == 1)
		return 1;
	if (stair - 4 < 0)
		return 2 * cals(stair - 1);
	if (stair - 4 >= 0)
		return 2 * cals(stair - 1) - cals(stair - 4);
}

int main()
{
	cout << "input stair number: ";
	int nStair = 0;
	cin >> nStair;
	cout << endl << cals(nStair);
}
